
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a95  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000800  00000000  00000000  00000d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067f  00000000  00000000  00001501  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00001b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000488  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000161  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  0000229d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <do_act>:
*description :
        function to do action from mcu 1 
***********************/
void do_act (int data)
{
	if(data==1)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	91 05       	cpc	r25, r1
  70:	29 f4       	brne	.+10     	; 0x7c <do_act+0x10>
	LED_ON(3);
  72:	83 e0       	ldi	r24, 0x03	; 3
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	0e 94 4d 00 	call	0x9a	; 0x9a <LED_ON>
  7a:	08 95       	ret
	
	else if (data ==2)
  7c:	02 97       	sbiw	r24, 0x02	; 2
  7e:	21 f4       	brne	.+8      	; 0x88 <do_act+0x1c>
	LED_ON(2);	
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 4d 00 	call	0x9a	; 0x9a <LED_ON>
  88:	08 95       	ret

0000008a <recieve_act>:
        function to recieve order from mcu 1 
***********************/
void recieve_act ()
{
	int data ; 
	spiSlaveInit();
  8a:	0e 94 60 00 	call	0xc0	; 0xc0 <spiSlaveInit>
	data = spiRcieve();
  8e:	0e 94 63 00 	call	0xc6	; 0xc6 <spiRcieve>
	do_act(data);
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 36 00 	call	0x6c	; 0x6c <do_act>
  98:	08 95       	ret

0000009a <LED_ON>:
         led number 
 *description : 
         function to turn led on 
********************/
void LED_ON(uint8_t  LED_NUM)
{
  9a:	cf 93       	push	r28
  9c:	c8 2f       	mov	r28, r24
	DIO_INIT(DIO_DDRD,OUTPUT,(LED_NUM));
  9e:	81 b3       	in	r24, 0x11	; 17
  a0:	4c 2f       	mov	r20, r28
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	0e 94 5e 00 	call	0xbc	; 0xbc <DIO_INIT>
	DIO_Wirte_Bin(DIO_PORTD,(LED_NUM),ON);
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	6c 2f       	mov	r22, r28
  ae:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_Wirte_Bin>
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <main>:
int main(void)
{
    
    while (1) 
    {
		recieve_act ();
  b6:	0e 94 45 00 	call	0x8a	; 0x8a <recieve_act>
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <main>

000000bc <DIO_INIT>:
			3-bin number
*Description :
			can use it do select the direction of bins , can be input or output.
********************/
extern void DIO_INIT(uint8_t  DirAdd , uint8_t Dir , uint8_t Bin)
{
  bc:	08 95       	ret

000000be <DIO_Wirte_Bin>:
		 3-the value we need to out it 
*Description :
			use it to write a value in DIO pins by using port reg.    
*******/
extern void DIO_Wirte_Bin(uint8_t  PortAdd , uint8_t Bin , uint8_t Value)
{
  be:	08 95       	ret

000000c0 <spiSlaveInit>:
  c0:	be 9a       	sbi	0x17, 6	; 23
  c2:	6e 9a       	sbi	0x0d, 6	; 13
  c4:	08 95       	ret

000000c6 <spiRcieve>:
  c6:	77 9b       	sbis	0x0e, 7	; 14
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <spiRcieve>
  ca:	8f b1       	in	r24, 0x0f	; 15
  cc:	08 95       	ret

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
