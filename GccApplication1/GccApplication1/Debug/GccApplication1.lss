
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000288  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a8  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f6  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000737  00000000  00000000  000015be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00001cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046e  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000033a  00000000  00000000  000022e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  64:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <read_Bluetooth>:

unsigned int  read_Bluetooth ()
{
	uint8_t  data;
	/*should read from UART*/
	UART_Init(9600);   /*enter baude rate*/
  6c:	60 e8       	ldi	r22, 0x80	; 128
  6e:	75 e2       	ldi	r23, 0x25	; 37
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 5b 00 	call	0xb6	; 0xb6 <UART_Init>
	data = UART_recieve_byte();   
  78:	0e 94 9c 00 	call	0x138	; 0x138 <UART_recieve_byte>
	/*DIO_INIT(DIO_DDRD,INPUT,0);
	DIO_Read_Bin(DIO_PIND,0,data);*/
    
	return data;

  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	08 95       	ret

00000080 <send_order>:
*description:
       function to send data using spi
***********************/

void send_order()
{
  80:	cf 93       	push	r28
	uint8_t order = read_Bluetooth ();
  82:	0e 94 36 00 	call	0x6c	; 0x6c <read_Bluetooth>
  86:	c8 2f       	mov	r28, r24
	spiMasterInit();
  88:	0e 94 4e 00 	call	0x9c	; 0x9c <spiMasterInit>
	spiTransmit(order);
  8c:	8c 2f       	mov	r24, r28
  8e:	0e 94 55 00 	call	0xaa	; 0xaa <spiTransmit>
}
  92:	cf 91       	pop	r28
  94:	08 95       	ret

00000096 <main>:
int main(void)
{
   
    while (1) 
    {
		send_order();
  96:	0e 94 40 00 	call	0x80	; 0x80 <send_order>
  9a:	fd cf       	rjmp	.-6      	; 0x96 <main>

0000009c <spiMasterInit>:
  9c:	87 b3       	in	r24, 0x17	; 23
  9e:	80 6b       	ori	r24, 0xB0	; 176
  a0:	87 bb       	out	0x17, r24	; 23
  a2:	8d b1       	in	r24, 0x0d	; 13
  a4:	80 65       	ori	r24, 0x50	; 80
  a6:	8d b9       	out	0x0d, r24	; 13
  a8:	08 95       	ret

000000aa <spiTransmit>:
  aa:	8f b9       	out	0x0f, r24	; 15
  ac:	c4 98       	cbi	0x18, 4	; 24
  ae:	77 9b       	sbis	0x0e, 7	; 14
  b0:	fe cf       	rjmp	.-4      	; 0xae <spiTransmit+0x4>
  b2:	c4 9a       	sbi	0x18, 4	; 24
  b4:	08 95       	ret

000000b6 <UART_Init>:
	{
		UART_send_byte(ptr[i]);
		i++;
	}
	UART_send_byte(ptr[i]);
}
  b6:	af 92       	push	r10
  b8:	bf 92       	push	r11
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	dc 01       	movw	r26, r24
  cc:	cb 01       	movw	r24, r22
  ce:	28 2f       	mov	r18, r24
  d0:	39 2f       	mov	r19, r25
  d2:	4a 2f       	mov	r20, r26
  d4:	5b 2f       	mov	r21, r27
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	04 e0       	ldi	r16, 0x04	; 4
  e0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__ashldi3>
  e4:	a2 2e       	mov	r10, r18
  e6:	b3 2e       	mov	r11, r19
  e8:	c4 2e       	mov	r12, r20
  ea:	d5 2e       	mov	r13, r21
  ec:	e6 2e       	mov	r14, r22
  ee:	f7 2e       	mov	r15, r23
  f0:	08 2f       	mov	r16, r24
  f2:	19 2f       	mov	r17, r25
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	34 e2       	ldi	r19, 0x24	; 36
  f8:	44 ef       	ldi	r20, 0xF4	; 244
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 a2 00 	call	0x144	; 0x144 <__udivdi3>
 108:	af ef       	ldi	r26, 0xFF	; 255
 10a:	0e 94 36 01 	call	0x26c	; 0x26c <__adddi3_s8>
 10e:	e2 2f       	mov	r30, r18
 110:	08 e0       	ldi	r16, 0x08	; 8
 112:	0e 94 1a 01 	call	0x234	; 0x234 <__lshrdi3>
 116:	20 bd       	out	0x20, r18	; 32
 118:	e9 b9       	out	0x09, r30	; 9
 11a:	88 e1       	ldi	r24, 0x18	; 24
 11c:	8a b9       	out	0x0a, r24	; 10
 11e:	86 e8       	ldi	r24, 0x86	; 134
 120:	80 bd       	out	0x20, r24	; 32
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	ff 90       	pop	r15
 12c:	ef 90       	pop	r14
 12e:	df 90       	pop	r13
 130:	cf 90       	pop	r12
 132:	bf 90       	pop	r11
 134:	af 90       	pop	r10
 136:	08 95       	ret

00000138 <UART_recieve_byte>:

char  UART_recieve_byte(void)
{
	while((UCSRA & (1<<RXC)) ==0);
 138:	5f 9b       	sbis	0x0b, 7	; 11
 13a:	fe cf       	rjmp	.-4      	; 0x138 <UART_recieve_byte>
	return UDR ;
 13c:	8c b1       	in	r24, 0x0c	; 12
}
 13e:	08 95       	ret

00000140 <__umoddi3>:
 140:	68 94       	set
 142:	01 c0       	rjmp	.+2      	; 0x146 <__udivdi3_umoddi3>

00000144 <__udivdi3>:
 144:	e8 94       	clt

00000146 <__udivdi3_umoddi3>:
 146:	8f 92       	push	r8
 148:	9f 92       	push	r9
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	0e 94 ae 00 	call	0x15c	; 0x15c <__udivmod64>
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	9f 90       	pop	r9
 158:	8f 90       	pop	r8
 15a:	08 95       	ret

0000015c <__udivmod64>:
 15c:	88 24       	eor	r8, r8
 15e:	99 24       	eor	r9, r9
 160:	f4 01       	movw	r30, r8
 162:	e4 01       	movw	r28, r8
 164:	b0 e4       	ldi	r27, 0x40	; 64
 166:	9f 93       	push	r25
 168:	aa 27       	eor	r26, r26
 16a:	9a 15       	cp	r25, r10
 16c:	8b 04       	cpc	r8, r11
 16e:	9c 04       	cpc	r9, r12
 170:	ed 05       	cpc	r30, r13
 172:	fe 05       	cpc	r31, r14
 174:	cf 05       	cpc	r28, r15
 176:	d0 07       	cpc	r29, r16
 178:	a1 07       	cpc	r26, r17
 17a:	98 f4       	brcc	.+38     	; 0x1a2 <__udivmod64+0x46>
 17c:	ad 2f       	mov	r26, r29
 17e:	dc 2f       	mov	r29, r28
 180:	cf 2f       	mov	r28, r31
 182:	fe 2f       	mov	r31, r30
 184:	e9 2d       	mov	r30, r9
 186:	98 2c       	mov	r9, r8
 188:	89 2e       	mov	r8, r25
 18a:	98 2f       	mov	r25, r24
 18c:	87 2f       	mov	r24, r23
 18e:	76 2f       	mov	r23, r22
 190:	65 2f       	mov	r22, r21
 192:	54 2f       	mov	r21, r20
 194:	43 2f       	mov	r20, r19
 196:	32 2f       	mov	r19, r18
 198:	22 27       	eor	r18, r18
 19a:	b8 50       	subi	r27, 0x08	; 8
 19c:	31 f7       	brne	.-52     	; 0x16a <__udivmod64+0xe>
 19e:	bf 91       	pop	r27
 1a0:	27 c0       	rjmp	.+78     	; 0x1f0 <__udivmod64+0x94>
 1a2:	1b 2e       	mov	r1, r27
 1a4:	bf 91       	pop	r27
 1a6:	bb 27       	eor	r27, r27
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	44 1f       	adc	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	66 1f       	adc	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	88 1f       	adc	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	88 1c       	adc	r8, r8
 1ba:	99 1c       	adc	r9, r9
 1bc:	ee 1f       	adc	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	cc 1f       	adc	r28, r28
 1c2:	dd 1f       	adc	r29, r29
 1c4:	aa 1f       	adc	r26, r26
 1c6:	bb 1f       	adc	r27, r27
 1c8:	8a 14       	cp	r8, r10
 1ca:	9b 04       	cpc	r9, r11
 1cc:	ec 05       	cpc	r30, r12
 1ce:	fd 05       	cpc	r31, r13
 1d0:	ce 05       	cpc	r28, r14
 1d2:	df 05       	cpc	r29, r15
 1d4:	a0 07       	cpc	r26, r16
 1d6:	b1 07       	cpc	r27, r17
 1d8:	48 f0       	brcs	.+18     	; 0x1ec <__udivmod64+0x90>
 1da:	8a 18       	sub	r8, r10
 1dc:	9b 08       	sbc	r9, r11
 1de:	ec 09       	sbc	r30, r12
 1e0:	fd 09       	sbc	r31, r13
 1e2:	ce 09       	sbc	r28, r14
 1e4:	df 09       	sbc	r29, r15
 1e6:	a0 0b       	sbc	r26, r16
 1e8:	b1 0b       	sbc	r27, r17
 1ea:	21 60       	ori	r18, 0x01	; 1
 1ec:	1a 94       	dec	r1
 1ee:	e1 f6       	brne	.-72     	; 0x1a8 <__udivmod64+0x4c>
 1f0:	2e f4       	brtc	.+10     	; 0x1fc <__udivmod64+0xa0>
 1f2:	94 01       	movw	r18, r8
 1f4:	af 01       	movw	r20, r30
 1f6:	be 01       	movw	r22, r28
 1f8:	cd 01       	movw	r24, r26
 1fa:	00 0c       	add	r0, r0
 1fc:	08 95       	ret

000001fe <__ashldi3>:
 1fe:	0f 93       	push	r16
 200:	08 30       	cpi	r16, 0x08	; 8
 202:	90 f0       	brcs	.+36     	; 0x228 <__ashldi3+0x2a>
 204:	98 2f       	mov	r25, r24
 206:	87 2f       	mov	r24, r23
 208:	76 2f       	mov	r23, r22
 20a:	65 2f       	mov	r22, r21
 20c:	54 2f       	mov	r21, r20
 20e:	43 2f       	mov	r20, r19
 210:	32 2f       	mov	r19, r18
 212:	22 27       	eor	r18, r18
 214:	08 50       	subi	r16, 0x08	; 8
 216:	f4 cf       	rjmp	.-24     	; 0x200 <__ashldi3+0x2>
 218:	22 0f       	add	r18, r18
 21a:	33 1f       	adc	r19, r19
 21c:	44 1f       	adc	r20, r20
 21e:	55 1f       	adc	r21, r21
 220:	66 1f       	adc	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	88 1f       	adc	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	0a 95       	dec	r16
 22a:	b2 f7       	brpl	.-20     	; 0x218 <__ashldi3+0x1a>
 22c:	0f 91       	pop	r16
 22e:	08 95       	ret

00000230 <__ashrdi3>:
 230:	97 fb       	bst	r25, 7
 232:	10 f8       	bld	r1, 0

00000234 <__lshrdi3>:
 234:	16 94       	lsr	r1
 236:	00 08       	sbc	r0, r0
 238:	0f 93       	push	r16
 23a:	08 30       	cpi	r16, 0x08	; 8
 23c:	98 f0       	brcs	.+38     	; 0x264 <__lshrdi3+0x30>
 23e:	08 50       	subi	r16, 0x08	; 8
 240:	23 2f       	mov	r18, r19
 242:	34 2f       	mov	r19, r20
 244:	45 2f       	mov	r20, r21
 246:	56 2f       	mov	r21, r22
 248:	67 2f       	mov	r22, r23
 24a:	78 2f       	mov	r23, r24
 24c:	89 2f       	mov	r24, r25
 24e:	90 2d       	mov	r25, r0
 250:	f4 cf       	rjmp	.-24     	; 0x23a <__lshrdi3+0x6>
 252:	05 94       	asr	r0
 254:	97 95       	ror	r25
 256:	87 95       	ror	r24
 258:	77 95       	ror	r23
 25a:	67 95       	ror	r22
 25c:	57 95       	ror	r21
 25e:	47 95       	ror	r20
 260:	37 95       	ror	r19
 262:	27 95       	ror	r18
 264:	0a 95       	dec	r16
 266:	aa f7       	brpl	.-22     	; 0x252 <__lshrdi3+0x1e>
 268:	0f 91       	pop	r16
 26a:	08 95       	ret

0000026c <__adddi3_s8>:
 26c:	00 24       	eor	r0, r0
 26e:	a7 fd       	sbrc	r26, 7
 270:	00 94       	com	r0
 272:	2a 0f       	add	r18, r26
 274:	30 1d       	adc	r19, r0
 276:	40 1d       	adc	r20, r0
 278:	50 1d       	adc	r21, r0
 27a:	60 1d       	adc	r22, r0
 27c:	70 1d       	adc	r23, r0
 27e:	80 1d       	adc	r24, r0
 280:	90 1d       	adc	r25, r0
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
